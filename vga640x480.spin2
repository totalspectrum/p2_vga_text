CON
  BASEPIN = 48
  pixel_clock_freq = 25_000_000

  COLS = 80
  ROWS = 30
  FONT_HEIGHT = 16
	
DAT
'
' font buffer
'
	long
fontdata
	file "unscii-16.bin"
'	file "unscii-8-fantasy.bin"

VAR
    long params[40] ' parameters for running the VGA tile driver
    long screen_buffer[COLS*ROWS*2]
    
OBJ
    vga: "vga_tile_driver.spin2"

'
' calculate ($8000_0000 * a) / (b)
'
CON PIXSHIFT = 31

PRI calcscale(a, b) | shiftcnt
  shiftcnt := PIXSHIFT
  ' remove factors of 5 (will be pretty common)
  repeat while 0 == (a // 5) and 0 == (b // 5)
    a := a / 5
    b := b / 5

  ' scale a up as much as we can
  repeat while ((a & $4000_0000) == 0) and shiftcnt > 0
    a := a << 1
    shiftcnt--
  repeat while ((b & 1) == 0) and shiftcnt > 0
    b := b>>1
    shiftcnt--
  return (a / b) << shiftcnt
      
'
' calculate ($8000_0000 * a) / (b)
'
PUB start(pinbase) | i, pclkscale, pclk, sysclk, x
  ' calculate clock frequency
  pclk := pixel_clock_freq ' pixel clock
  sysclk := clkfreq  ' system clock
  ' calculate scale := $8000_0000 * pclk / sysclk
  ' this is equal to pclk / (sysclk / $8000_000)
  pclkscale := calcscale(pclk, sysclk)

  i := 0
  params[i++] := pinbase
  params[i++] := @screen_buffer	' screen buffer
  params[i++] := COLS           ' screen columns
  params[i++] := ROWS           ' screen rows
  params[i++] := @fontdata	' font data
  params[i++] := 8		' font width
  params[i++] := FONT_HEIGHT    ' font height
  params[i++] := pclkscale 'fset           ' pixel clock scaling value
  params[i++] := 16             ' horizontal front porch
  params[i++] := 96             ' hsync pulse
  params[i++] := 48             ' horizontal back porch
  params[i++] := 10             ' vertical front porch
  params[i++] := 2              ' vertical sync lines
  params[i++] := 33             ' vertical back porch
  params[i++] := %11            ' polarity (1 == negative)
  vga.start(@params)
  init_terminal
  
#include "vga_text_routines.spinh"
#include "std_text_routines.spinh"
